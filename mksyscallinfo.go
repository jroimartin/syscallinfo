// Copyright 2015 The syscallinfo Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build ignore

package main

import (
	"bytes"
	"encoding/json"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"text/template"

	"github.com/jroimartin/syscallinfo"
)

var (
	arch     = flag.String("arch", "amd64", "architecture corresponding to the context file")
	filename = flag.String("output", "", "output file name (standard output if omitted)")
)

type SyscallinfoPackage struct {
	Arch     string
	Syscalls []syscallinfo.Syscall
}

func main() {
	flag.Usage = usage
	flag.Parse()
	if len(flag.Args()) != 1 {
		usage()
	}
	ctxfile := flag.Arg(0)

	ctxdata, err := ioutil.ReadFile(ctxfile)
	if err != nil {
		log.Fatalln(err)
	}

	sipkg := SyscallinfoPackage{Arch: *arch}
	if err := json.Unmarshal(ctxdata, &sipkg.Syscalls); err != nil {
		log.Fatalln(err)
	}

	var buf bytes.Buffer
	t := template.Must(template.New("src").Parse(srcTemplate))
	if err := t.Execute(&buf, sipkg); err != nil {
		log.Fatalln(err)
	}
	if *filename != "" {
		err = ioutil.WriteFile(*filename, buf.Bytes(), 0644)
	} else {
		_, err = os.Stdout.Write(buf.Bytes())
	}
	if err != nil {
		log.Fatalln(err)
	}
}

func usage() {
	fmt.Fprintf(os.Stderr, "usage: go run mksyscallinfo.go [flags] ctxfile\n")
	flag.PrintDefaults()
	os.Exit(2)
}

const srcTemplate = `// MACHINE GENERATED BY 'go generate' COMMAND; DO NOT EDIT

package {{.Arch}}

import (
	"errors"
	"github.com/jroimartin/syscallinfo"
)

var syscalls = map[int]syscallinfo.Syscall{
{{range .Syscalls}}	{{.Num}}: syscallinfo.Syscall{
		Num: {{.Num}},
		Name: "{{.Name}}",
		Entry: "{{.Entry}}",
		Args: []syscallinfo.Argument{
{{range .Args}}			{
				RefCount: {{.RefCount}},
				Sig: "{{.Sig}}",
				Context: {{.Context}},
			},
{{end}}		},
	},
{{end}}}

// Syscall returns a Syscall object which number matches the provided one.
func Syscall(n int) (syscallinfo.Syscall, error) {
	sc, ok := syscalls[n]
	if !ok {
		return syscallinfo.Syscall{}, errors.New("unknown syscall")
	}
	return sc, nil
}

// SyscallByEntry returns a Syscall object which entry point matches the
// provided one.
func SyscallByEntry(entry string) (syscallinfo.Syscall, error) {
	for _, sc := range syscalls {
		if sc.Entry == entry {
			return sc, nil
		}
	}
	return syscallinfo.Syscall{}, errors.New("unknown syscall")
}
`
